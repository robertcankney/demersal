// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MagnapinnaClient is the client API for Magnapinna service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MagnapinnaClient interface {
	Register(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Lease, error)
	CheckRegistration(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Lease, error)
	Deregister(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Lease, error)
	JoinCluster(ctx context.Context, opts ...grpc.CallOption) (Magnapinna_JoinClusterClient, error)
	StartSession(ctx context.Context, opts ...grpc.CallOption) (Magnapinna_StartSessionClient, error)
}

type magnapinnaClient struct {
	cc grpc.ClientConnInterface
}

func NewMagnapinnaClient(cc grpc.ClientConnInterface) MagnapinnaClient {
	return &magnapinnaClient{cc}
}

func (c *magnapinnaClient) Register(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, "/Magnapinna/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnapinnaClient) CheckRegistration(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, "/Magnapinna/CheckRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnapinnaClient) Deregister(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, "/Magnapinna/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnapinnaClient) JoinCluster(ctx context.Context, opts ...grpc.CallOption) (Magnapinna_JoinClusterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Magnapinna_ServiceDesc.Streams[0], "/Magnapinna/JoinCluster", opts...)
	if err != nil {
		return nil, err
	}
	x := &magnapinnaJoinClusterClient{stream}
	return x, nil
}

type Magnapinna_JoinClusterClient interface {
	Send(*Output) error
	Recv() (*Command, error)
	grpc.ClientStream
}

type magnapinnaJoinClusterClient struct {
	grpc.ClientStream
}

func (x *magnapinnaJoinClusterClient) Send(m *Output) error {
	return x.ClientStream.SendMsg(m)
}

func (x *magnapinnaJoinClusterClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *magnapinnaClient) StartSession(ctx context.Context, opts ...grpc.CallOption) (Magnapinna_StartSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Magnapinna_ServiceDesc.Streams[1], "/Magnapinna/StartSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &magnapinnaStartSessionClient{stream}
	return x, nil
}

type Magnapinna_StartSessionClient interface {
	Send(*Command) error
	Recv() (*Output, error)
	grpc.ClientStream
}

type magnapinnaStartSessionClient struct {
	grpc.ClientStream
}

func (x *magnapinnaStartSessionClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *magnapinnaStartSessionClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MagnapinnaServer is the server API for Magnapinna service.
// All implementations must embed UnimplementedMagnapinnaServer
// for forward compatibility
type MagnapinnaServer interface {
	Register(context.Context, *Registration) (*Lease, error)
	CheckRegistration(context.Context, *Registration) (*Lease, error)
	Deregister(context.Context, *Registration) (*Lease, error)
	JoinCluster(Magnapinna_JoinClusterServer) error
	StartSession(Magnapinna_StartSessionServer) error
	mustEmbedUnimplementedMagnapinnaServer()
}

// UnimplementedMagnapinnaServer must be embedded to have forward compatible implementations.
type UnimplementedMagnapinnaServer struct {
}

func (UnimplementedMagnapinnaServer) Register(context.Context, *Registration) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMagnapinnaServer) CheckRegistration(context.Context, *Registration) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegistration not implemented")
}
func (UnimplementedMagnapinnaServer) Deregister(context.Context, *Registration) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedMagnapinnaServer) JoinCluster(Magnapinna_JoinClusterServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (UnimplementedMagnapinnaServer) StartSession(Magnapinna_StartSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedMagnapinnaServer) mustEmbedUnimplementedMagnapinnaServer() {}

// UnsafeMagnapinnaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MagnapinnaServer will
// result in compilation errors.
type UnsafeMagnapinnaServer interface {
	mustEmbedUnimplementedMagnapinnaServer()
}

func RegisterMagnapinnaServer(s grpc.ServiceRegistrar, srv MagnapinnaServer) {
	s.RegisterService(&Magnapinna_ServiceDesc, srv)
}

func _Magnapinna_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnapinnaServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Magnapinna/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnapinnaServer).Register(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnapinna_CheckRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnapinnaServer).CheckRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Magnapinna/CheckRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnapinnaServer).CheckRegistration(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnapinna_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnapinnaServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Magnapinna/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnapinnaServer).Deregister(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnapinna_JoinCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MagnapinnaServer).JoinCluster(&magnapinnaJoinClusterServer{stream})
}

type Magnapinna_JoinClusterServer interface {
	Send(*Command) error
	Recv() (*Output, error)
	grpc.ServerStream
}

type magnapinnaJoinClusterServer struct {
	grpc.ServerStream
}

func (x *magnapinnaJoinClusterServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func (x *magnapinnaJoinClusterServer) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Magnapinna_StartSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MagnapinnaServer).StartSession(&magnapinnaStartSessionServer{stream})
}

type Magnapinna_StartSessionServer interface {
	Send(*Output) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type magnapinnaStartSessionServer struct {
	grpc.ServerStream
}

func (x *magnapinnaStartSessionServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *magnapinnaStartSessionServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Magnapinna_ServiceDesc is the grpc.ServiceDesc for Magnapinna service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Magnapinna_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Magnapinna",
	HandlerType: (*MagnapinnaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Magnapinna_Register_Handler,
		},
		{
			MethodName: "CheckRegistration",
			Handler:    _Magnapinna_CheckRegistration_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Magnapinna_Deregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinCluster",
			Handler:       _Magnapinna_JoinCluster_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StartSession",
			Handler:       _Magnapinna_StartSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/magnapinna.proto",
}
